generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource storage {
  provider = "sqlite"
  url      = "file:./db/storage.db"
}

model FileItem {
  filehash String @id
  path     String
  name     String
  type     String

  metadata FileItemMetadata?
  timings  FileItemTimings?

  playlistItems  PlaylistItem[]
  playlistFsMeta PlaylistFsMeta[]

  classedItems ClassedItem[]
}

model FileItemMetadata {
  id Int @id @default(autoincrement())

  artist String @default("unknown")
  title  String @default("unknown")

  fileItem     FileItem @relation(fields: [fileItemHash], references: [filehash])
  fileItemHash String   @unique
}

model FileItemTimings {
  id Int @id @default(autoincrement())

  duration  Float @default(0)
  trimStart Float @default(0)
  trimEnd   Float @default(0)

  fileItem     FileItem @relation(fields: [fileItemHash], references: [filehash])
  fileItemHash String   @unique
}

model Stage {
  id Int @id @default(autoincrement())
  name          String
  rules              StageRule[]

  targetSequenceUp   TargetSequence? @relation(name: "stageUp")
  targetSequenceDown TargetSequence? @relation(name: "stageDown")
}

model StageRule {
  id Int @id @default(autoincrement())

  stage   Stage? @relation(fields: [stageId], references: [id])
  stageId Int?

  type String @default("MAINLINE")

  timeFrom Int?
  timeTo   Int?

  targetType String @default("TAGS")

  targetSequence   TargetSequence? @relation(fields: [targetSequenceId], references: [id])
  targetSequenceId Int?

  targetTags   TargetTags? @relation(fields: [targetTagsId], references: [id])
  targetTagsId Int

  targetPlaylists   TargetPlaylists? @relation(fields: [targetPlaylistsId], references: [id])
  targetPlaylistsId Int?
}

model TargetSequence {
  id            Int    @id @default(autoincrement())
  subWaveLength Int

  stageUp   Stage @relation(fields: [stageUpId], references: [id], name: "stageUp")
  stageUpId Int   @unique

  stageDown   Stage @relation(fields: [stageDownId], references: [id], name: "stageDown")
  stageDownId Int   @unique

  stageSubRules StageRule[]
  scheduleItems  ScheduleItem[]
}

model TargetTags {
  id         Int         @id @default(autoincrement())
  classItem  ClassItem[]
  stageRules StageRule[]
}

model TargetPlaylists {
  id         Int         @id @default(autoincrement())
  playlists  Playlist[]
  stageRules StageRule[]
}

model ScheduleItem {
  id          Int @id @default(autoincrement())
  withMerging Int @default(0)

  name    String @default("Default schedule name")
  startAt Int
  endAt   Int

  playlists PlaylistsOnScheduleItem[]

  type             String          @default("Playlists")

  sequence         TargetSequence? @relation(fields: [targetSequenceId], references: [id])
  targetSequenceId Int?
}

model PlaylistsOnScheduleItem {
  scheduleItem   ScheduleItem @relation(fields: [scheduleItemId], references: [id])
  scheduleItemId Int

  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId Int

  @@id([scheduleItemId, playlistId])
}

model Playlist {
  id Int @id @default(autoincrement())

  name String
  type String

  fsMeta     PlaylistFsMeta[]
  manualMeta PlaylistManualMeta?

  scheduleItems PlaylistsOnScheduleItem[]

  targetPlaylists   TargetPlaylists? @relation(fields: [targetPlaylistsId], references: [id])
  targetPlaylistsId Int?
}

model PlaylistFsMeta {
  id Int @id @default(autoincrement())

  fileItem     FileItem? @relation(fields: [fileItemHash], references: [filehash])
  fileItemHash String?

  playlist   Playlist? @relation(fields: [playlistId], references: [id])
  playlistId Int?
}

model PlaylistManualMeta {
  id Int @id @default(autoincrement())

  playlist   Playlist? @relation(fields: [playlistId], references: [id])
  playlistId Int?      @unique

  playlistItems PlaylistItem[]
}

model PlaylistItem {
  id    Int @id @default(autoincrement())
  order Int

  fileItem     FileItem? @relation(fields: [fileItemHash], references: [filehash])
  fileItemHash String?

  playlistManualMeta   PlaylistManualMeta? @relation(fields: [playlistManualMetaId], references: [id])
  playlistManualMetaId Int?
}

model ClassCategory {
  id    Int         @id @default(autoincrement())
  name  String
  items ClassItem[]
}

model ClassItem {
  id    Int    @id @default(autoincrement())
  value String

  category   ClassCategory @relation(fields: [categoryId], references: [id])
  categoryId Int

  classedItems ClassedItem[]

  targetTags   TargetTags? @relation(fields: [targetTagsId], references: [id])
  targetTagsId Int?
}

model ClassedItem {
  id Int @id @default(autoincrement())

  classItem   ClassItem @relation(fields: [classItemId], references: [id])
  classItemId Int

  file     FileItem @relation(fields: [fileHash], references: [filehash])
  fileHash String
}
